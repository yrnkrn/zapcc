name: build_binaries_on_release_branch_push

on:
  push:
    branches: 
      - release/*

jobs:
  build_Linux:
    name: Ubuntu build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
      name: Checkout repository
    - name: Get Env
      run: |
        env
        set
        uname -a
        cat /etc/*release*
        lscpu
        echo "nproc=$(nproc)"
        sudo dmidecode
        lsmem
        free -h
        df -h
        ls -kahl
        export cwd=$PWD
        export ACCEPT_EULA=Y
    - name: Install Ninja, CMake, and co. 
    # actually, all but ninja should be installed - see https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions#ubuntu-1804-lts
    # sudo apt-get upgrade -y # do not run upgrade on all outdated packages...
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl build-essential ninja-build python python3-pip ocaml
        sudo pip3 install pygments pyyaml
        mkdir -pv /tmp/cmake && cd /tmp/cmake
        curl -JL 'https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz' | tar xvz --strip-components=1 -f -
        export PATH=/tmp/cmake/bin:$PATH
    - name: Configure and build
      run: |
        mkdir -pv /tmp/build && cd /tmp/build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_WARNINGS=OFF ${cwd:-$GITHUB_WORKSPACE}
        ninja
    - name: Run all tests
      run: |
        mkdir -pv /tmp/tests
        ninja check-all 2>&1 | tee /tmp/tests/check-all.log
    - name: Publish artifacts (i.e. binaries after compilation)
      uses: actions/upload-artifact@v1
      with: 
        name: Ubuntu_build
        path: /tmp/build
    - name: Publish test results
      uses: actions/upload-artifact@v1
      with: 
        name: Ubuntu_tests
        path: /tmp/tests

  build_macOS:
    name: macOS build 
    runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v1
        name: Checkout repository
      - name: Get Env
        run: |
          env
          set
          uname -a
          sw_vers
          xcodebuild -version
          system_profiler -timeout 30 -detailLevel basic
          df -h
          ls -kahl
          export cwd=$PWD
      - name: Install CMake and Ninja
        run: |
          brew install cmake ninja ocaml
          pip install pygments pyyaml
          export CC=$(which clang)
          export CXX=$(which clang++)
      - name: Configure and build
        run: |
          mkdir -pv /tmp/build && cd /tmp/build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_WARNINGS=OFF ${cwd:-$GITHUB_WORKSPACE}
          ninja
      - name: Run all checks
        run: |
          mkdir -pv /tmp/tests
          ninja check-all 2>&1 | tee /tmp/tests/check-all.log
      - name: Publish artifacts (i.e. binaries after compilation)
        uses: actions/upload-artifact@v1
        with: 
          name: macOS_build
          path: /tmp/build
      - name: Publish test results
        uses: actions/upload-artifact@v1
        with: 
          name: macOS_tests
          path: /tmp/tests
